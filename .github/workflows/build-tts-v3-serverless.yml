# .github/workflows/build-tts-v3-serverless.yml
# Fixed version with proper permissions and authentication
name: Build TTS V3 Serverless Containers - Permissions Fixed
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: aparna0112

# Add permissions for GitHub token to write packages
permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-containers:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container:
          - name: gateway
            context: ./Gateway
            image: tts-gateway
            dockerfile: Gateway/Dockerfile
          - name: kokkoro  
            context: ./models/kokkoro
            image: tts-kokkoro
            dockerfile: models/kokkoro/Dockerfile
          - name: chatterbox
            context: ./models/chatterbox
            image: tts-chatterbox
            dockerfile: models/chatterbox/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Create missing files if needed
        run: |
          # Ensure directory exists
          mkdir -p ${{ matrix.container.context }}
          
          # Create Dockerfile if missing
          if [ ! -f "${{ matrix.container.dockerfile }}" ]; then
            echo "Creating Dockerfile for ${{ matrix.container.name }}..."
            cat > "${{ matrix.container.dockerfile }}" << 'EOF'
          FROM python:3.10-slim
          
          WORKDIR /app
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              && rm -rf /var/lib/apt/lists/*
          
          # Install Python dependencies
          COPY requirements.txt* ./
          RUN pip install --no-cache-dir runpod PyJWT requests fastapi uvicorn || \
              pip install runpod PyJWT requests
          
          # Copy application files
          COPY . .
          
          # Create a basic handler if none exists
          RUN if [ ! -f handler.py ]; then \
                echo 'import runpod' > handler.py && \
                echo 'def handler(event): return {"success": True, "model": "${{ matrix.container.name }}", "message": "Basic handler"}' >> handler.py && \
                echo 'if __name__ == "__main__": runpod.serverless.start({"handler": handler})' >> handler.py; \
              fi
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
            CMD python -c "print('${{ matrix.container.name }} healthy')" || exit 1
          
          EXPOSE 8000
          CMD ["python", "handler.py"]
          EOF
          fi
          
          # Create requirements.txt if missing
          if [ ! -f "${{ matrix.container.context }}/requirements.txt" ]; then
            echo "Creating requirements.txt for ${{ matrix.container.name }}..."
            cat > "${{ matrix.container.context }}/requirements.txt" << 'EOF'
          runpod==1.7.6
          PyJWT==2.8.0
          requests>=2.25.0
          fastapi>=0.68.0
          uvicorn[standard]>=0.15.0
          python-multipart>=0.0.5
          EOF
          fi

      # Convert repository owner to lowercase for ghcr.io compatibility
      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=$(echo ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container.image }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to Container Registry  
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=v3-serverless
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push ${{ matrix.container.name }}
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: ${{ matrix.container.context }}
          file: ${{ matrix.container.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image was pushed
        run: |
          echo "Successfully built and pushed:"
          echo "- ${{ env.IMAGE_NAME }}:v3-serverless"
          echo "- ${{ env.IMAGE_NAME }}:latest"

  verify-build:
    needs: build-containers
    runs-on: ubuntu-latest
    steps:
      - name: Build verification
        run: |
          echo "TTS V3 Serverless containers built successfully!"
          echo ""
          echo "Available container images:"
          echo "- ghcr.io/aparna0112/tts-gateway:v3-serverless"
          echo "- ghcr.io/aparna0112/tts-kokkoro:v3-serverless"
          echo "- ghcr.io/aparna0112/tts-chatterbox:v3-serverless"
          echo ""
          echo "These containers are now ready for RunPod serverless deployment."

# =============================================================================
# Additional Steps to Fix Permissions Issue
# =============================================================================

"""
STEPS TO FIX THE PERMISSIONS ISSUE:

1. REPOSITORY SETTINGS:
   Go to: https://github.com/Aparna0112/TTS-Engine/settings/actions

   Under "Workflow permissions":
   - Select "Read and write permissions" 
   - Check "Allow GitHub Actions to create and approve pull requests"

2. PACKAGE SETTINGS:
   Go to: https://github.com/users/Aparna0112/packages
   
   For each package (if they exist):
   - Click on the package
   - Go to "Package settings"  
   - Under "Manage Actions access"
   - Add your repository with "Write" permissions

3. ALTERNATIVE: Use PERSONAL_ACCESS_TOKEN
   If the above doesn't work, create a Personal Access Token:
   
   a) Go to: https://github.com/settings/tokens
   b) Generate new token (classic)
   c) Select scopes: write:packages, read:packages, repo
   d) Copy the token
   e) Go to: https://github.com/Aparna0112/TTS-Engine/settings/secrets/actions
   f) Add secret: PERSONAL_ACCESS_TOKEN with your token value
   g) Update the workflow to use this token instead

4. VERIFY LOWERCASE NAMES:
   GitHub Container Registry requires lowercase names.
   The fixed workflow above handles this automatically.
"""

# =============================================================================
# Alternative workflow using PERSONAL_ACCESS_TOKEN (if needed)
# =============================================================================

"""
If you need to use a personal access token instead, replace the login step with:

      - name: Log in to Container Registry (with PAT)
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

Then add PERSONAL_ACCESS_TOKEN to your repository secrets.
